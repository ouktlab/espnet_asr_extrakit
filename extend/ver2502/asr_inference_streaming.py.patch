7c7
< from typing import List, Optional, Sequence, Tuple, Union
---
> from typing import Any, List, Optional, Sequence, Tuple, Union ## inserted
116,118c116,118
<         # look_ahead = asr_train_args.encoder_conf['look_ahead']
<         # hop_size   = asr_train_args.encoder_conf['hop_size']
<         # block_size = asr_train_args.encoder_conf['block_size']
---
>         look_ahead = asr_train_args.encoder_conf['look_ahead']
>         hop_size   = asr_train_args.encoder_conf['hop_size']
>         block_size = asr_train_args.encoder_conf['block_size']
129a130,132
>             look_ahead=look_ahead, ## inserted
>             hop_size=hop_size,     ## inserted
>             block_size=block_size, ## inserted
359a363,391
>     @staticmethod
>     def from_pretrained(
>         model_tag: Optional[str] = None,
>         **kwargs: Optional[Any],
>     ):
>         """Build Speech2Text instance from the pretrained model.
> 
>         Args:
>             model_tag (Optional[str]): Model tag of the pretrained models.
>                 Currently, the tags of espnet_model_zoo are supported.
> 
>         Returns:
>             Speech2Text: Speech2Text instance.
> 
>         """
>         if model_tag is not None:
>             try:
>                 from espnet_model_zoo.downloader import ModelDownloader
> 
>             except ImportError:
>                 logging.error(
>                     "`espnet_model_zoo` is not installed. "
>                     "Please install via `pip install -U espnet_model_zoo`."
>                 )
>                 raise
>             d = ModelDownloader()
>             kwargs.update(**d.download_and_unpack(model_tag))
> 
>         return Speech2TextStreaming(**kwargs)
